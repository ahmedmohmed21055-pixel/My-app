import express from "express";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import { storage } from "./storage.js";
import { insertProductSchema, aiRequestSchema } from "../shared/schema.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = Number(process.env.PORT) || 5000;

// Middleware
app.use(cors());
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// API Routes
app.get("/api/items", async (req, res) => {
  try {
    const products = await storage.getAllProducts();
    res.json(products);
  } catch (error) {
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช" });
  }
});

app.get("/api/items/*", async (req, res) => {
  try {
    const id = req.url.split('/').pop();
    if (!id) {
      return res.status(400).json({ success: false, message: "ูุนุฑู ุงูุตูู ูุทููุจ" });
    }
    const product = await storage.getProductById(id);
    if (!product) {
      return res.status(404).json({ success: false, message: "ุงูุตูู ุบูุฑ ููุฌูุฏ" });
    }
    res.json(product);
  } catch (error) {
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช" });
  }
});

app.post("/api/items", async (req, res) => {
  try {
    const validatedData = insertProductSchema.parse(req.body);
    const product = await storage.createProduct(validatedData);
    res.status(201).json(product);
  } catch (error) {
    if (error.name === "ZodError") {
      return res.status(400).json({ success: false, message: "ุจูุงูุงุช ุบูุฑ ุตุญูุญุฉ", errors: error.errors });
    }
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ุฅูุดุงุก ุงูุตูู" });
  }
});

app.put("/api/items/*", async (req, res) => {
  try {
    const id = req.url.split('/').pop();
    if (!id) {
      return res.status(400).json({ success: false, message: "ูุนุฑู ุงูุตูู ูุทููุจ" });
    }
    const validatedData = insertProductSchema.partial().parse(req.body);
    const product = await storage.updateProduct(id, validatedData);
    if (!product) {
      return res.status(404).json({ success: false, message: "ุงูุตูู ุบูุฑ ููุฌูุฏ" });
    }
    res.json(product);
  } catch (error) {
    if (error.name === "ZodError") {
      return res.status(400).json({ success: false, message: "ุจูุงูุงุช ุบูุฑ ุตุญูุญุฉ", errors: error.errors });
    }
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุตูู" });
  }
});

app.delete("/api/items/*", async (req, res) => {
  try {
    const id = req.url.split('/').pop();
    if (!id) {
      return res.status(400).json({ success: false, message: "ูุนุฑู ุงูุตูู ูุทููุจ" });
    }
    const deleted = await storage.deleteProduct(id);
    if (!deleted) {
      return res.status(404).json({ success: false, message: "ุงูุตูู ุบูุฑ ููุฌูุฏ" });
    }
    res.json({ success: true, message: "ุชู ุญุฐู ุงูุตูู ุจูุฌุงุญ" });
  } catch (error) {
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ุญุฐู ุงูุตูู" });
  }
});

app.post("/api/ai", async (req, res) => {
  try {
    const { prompt } = aiRequestSchema.parse(req.body);
    
    let response = "ุนุฐุฑุงูุ ูุง ูููููู ุงูุฅุฌุงุจุฉ ุนูู ูุฐุง ุงูุณุคุงู ุญุงููุงู.";
    
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes("ุณุนุฑ") && lowerPrompt.includes("ุณูู")) {
      response = "ุฃุณุนุงุฑ ุงูุฃุณูุงู ุงููุญุงุณูุฉ ุชุชุฑุงูุญ ุจูู 15-25 ุฌููู ุญุณุจ ุงูููุน ูุงูุณููู. ุฃูุตุญ ุจูุฑุงุฌุนุฉ ุงูุณูู ููุฃุณุนุงุฑ ุงูุญุงููุฉ.";
    } else if (lowerPrompt.includes("ุจุทุงุฑูุฉ")) {
      response = "ุจุทุงุฑูุงุช AAA ุนุงุฏุฉ ุชูุจุงุน ุจูุงูุด ุฑุจุญ 25-35%. ุฅุฐุง ูุงู ุณุนุฑ ุงูุดุฑุงุก 2.25 ุฌูููุ ูููู ุจูุนูุง ุจู 3-3.25 ุฌููู.";
    } else if (lowerPrompt.includes("ูุตุจุงุญ") || lowerPrompt.includes("ููุจุฉ")) {
      response = "ูุตุงุจูุญ LED ููุง ูุงูุด ุฑุจุญ ุฌูุฏ 40-50%. ุงููุตุงุจูุญ 9 ูุงุท ุชูุจุงุน ุนุงุฏุฉ ุจูู 10-15 ุฌููู.";
    } else if (lowerPrompt.includes("ูุงุจู") || lowerPrompt.includes("ุณูู")) {
      response = "ูุงุจูุงุช USB ููุน C ููุง ุทูุจ ุนุงูู. ูุงูุด ุฑุจุญ 30-40% ููุงุณุจ. ุงูุฃุณุนุงุฑ ุชุชุฑุงูุญ 6-12 ุฌููู ุญุณุจ ุงูุฌูุฏุฉ.";
    } else if (lowerPrompt.includes("ูุตูุญุฉ") || lowerPrompt.includes("ุงูุชุฑุงุญ")) {
      response = "ุฃูุตุญ ุจูุฑุงูุจุฉ ุงููุฎุฒูู ุจุงุณุชูุฑุงุฑ ูุชุญุฏูุซ ุงูุฃุณุนุงุฑ ุญุณุจ ุงูุณูู. ุฑูุฒ ุนูู ุงูุฃุตูุงู ุณุฑูุนุฉ ุงูุญุฑูุฉ.";
    }
    
    res.json({ text: response });
  } catch (error) {
    if (error.name === "ZodError") {
      return res.status(400).json({ success: false, message: "ุทูุจ ุบูุฑ ุตุญูุญ" });
    }
    res.status(500).json({ success: false, message: "ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุทูุจ" });
  }
});

// Serve static files
const clientPath = path.join(__dirname, "../client");
app.use(express.static(clientPath));

// Handle client-side routing
app.get('*', (req, res) => {
  if (!req.path.startsWith('/api')) {
    res.sendFile(path.join(clientPath, 'index.html'));
  }
});

app.listen(PORT, "0.0.0.0", () => {
  console.log(`๐ Arabic Store Management System running on http://0.0.0.0:${PORT}`);
  console.log(`๐ฑ ูุฑุญุจุงู ุจู ูู ูุธุงู ุฅุฏุงุฑุฉ ูุชุฌุฑ ุฃุจูุงูููุฑ!`);
});